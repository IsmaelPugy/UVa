import java.io.*;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.StringTokenizer;

public class Main {
static int TC,A,B;
static ArrayList<Integer> primes = new ArrayList<>();
static ArrayList<Integer> Nod = new ArrayList<>();
    public static void main(String[] args) throws IOException {
	// write your code here
        BufferedReader br = new BufferedReader
                (new InputStreamReader(System.in));
        PrintWriter pw =new PrintWriter
                (new OutputStreamWriter(System.out));
        TC = Integer.parseInt(br.readLine());
        StringTokenizer st;
        int i=0;
        sieveOfErthones();
        nod();
      //  System.out.println(Nod);
        while (TC-->0){
            st = new StringTokenizer(br.readLine());
            A = Integer.parseInt(st.nextToken());
            B = Integer.parseInt(st.nextToken());
            i++;
            int b = binary(A);
            if (Nod.get(b)<A)b++;
            int c = binary(B);
            if (Nod.get(c)>B)c--;
            pw.println("Case "+i+": "+(c-b+1));
        }
        pw.flush();


    }

    private static void nod() {
        Nod.add(1);
       int m = 0;
        while (Nod.get(m)<=1000000){
           m++;
          //  System.out.println( primeFactorisation(Nod.get(m-1)));
           Nod.add(primeFactorisation(Nod.get(m-1))+Nod.get(m-1));
        }
    }

    private static int primeFactorisation(int N) {
        int PF_index =0;
        int PF = primes.get(PF_index);
        int ans = 1;
        while (PF*PF<=N){
            int power = 0;
            while (N%PF==0){ N/=PF;power++;}
            ans*=(power+1);
            PF = primes.get(++PF_index);
        }
        if (N!=1)ans*=2;
        return ans;
    }

    private static void sieveOfErthones() {
        int max = 1000000;
        BitSet set = new BitSet(1000001);
        for (long i=2;i<=max;i++){
            if (!set.get((int)i)){
                for (long j=i*i;j<=max;j+=i)
                    set.set((int)j,true);
                primes.add((int)i);
            }
        }
    }
    //
    public static int binary(int a){
        int start = 0;
        int end = Nod.size()-1;
        int mid = 0;
        while (start<=end){
            mid = (start+end)/2;
            if (a>Nod.get(mid))
                start = mid+1;
            else if (a<Nod.get(mid))
                end = mid-1;
            else
                return mid;
        }
        return mid;
    }
}
