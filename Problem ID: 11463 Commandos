import java.io.*;
import java.util.*;
public class Main {
    static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static String line;
    static  int n,k,T,N,m,R;
    static StringTokenizer st;
    static Scanner in = new Scanner(System.in);
    static char [] word;
    static int [][] graph;
    public static void main(String[] args) throws IOException {
        T = Integer.parseInt(br.readLine());
        while (T-->0){
            int INF = 10000000;
            N = Integer.parseInt(br.readLine());
            R = Integer.parseInt(br.readLine());
            graph = new int[N][N];
            for (int i=0;i<R;i++){
                st  = new StringTokenizer(br.readLine());
                int u =Integer.parseInt(st.nextToken());
                int v = Integer.parseInt(st.nextToken());
                graph[u][v] = 1;
                graph[v][u] = 1;
            }
            st = new StringTokenizer(br.readLine());
            int S = Integer.parseInt(st.nextToken());
            int D = Integer.parseInt(st.nextToken());
            for (int i=0;i<N;i++)
                for (int j=0;j<N;j++)
                    if (i==j)
                        graph[i][j] = 0;
                    else if (graph[i][j] ==0)
                        graph[i][j] = INF;
            //Roy-Warshal
            for (int k=0;k<N;k++)
                for (int i=0;i<N;i++)
                    for (int j=0;j<N;j++)
                        graph[i][j] = Math.min(graph[i][j],graph[i][k]+graph[k][j]);
            //this will start ath the end vertex
            int max =0;
            for (int i=0;i<N;i++){
                 if(graph[i][S]!=INF&&graph[i][D]!=INF)
                max = Math.max(max,graph[i][S]+graph[i][D]);

            }
            ///for (int i=0;i<N;i++)
         pw.println("Case "+(++k)+": "+max);
        }
        pw.flush();

    }
}
